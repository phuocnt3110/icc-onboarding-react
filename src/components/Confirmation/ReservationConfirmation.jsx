import React, { useState, useEffect } from 'react';
import { 
  Card, 
  Typography, 
  Button, 
  Result, 
  Space, 
  Skeleton,
  Row,
  Col,
  Tag,
  Divider,
  Alert,
  Modal
} from 'antd';
import { 
  CheckCircleOutlined, 
  CalendarOutlined, 
  TeamOutlined, 
  BookOutlined,
  ClockCircleOutlined,
  UserOutlined,
  InfoCircleOutlined,
  CloseCircleOutlined
} from '@ant-design/icons';
import { useStudent } from '../../contexts/StudentContext';
import { ROUTES } from '../../config';
import { FIELD_MAPPINGS } from '../../config';
import { useProgressStep } from '../../contexts/ProgressStepContext';
import { InfoDisplay, ScheduleDisplay } from '../common';
import styles from './ReservationConfirmation.module.css';
import '../../styles/index.css';
import moment from 'moment';

const { Title, Text, Paragraph } = Typography;

// Gi√∫p format ng√†y gi·ªù hi·ªÉn th·ªã ƒë√∫ng ƒë·ªãnh d·∫°ng
const formatDate = (dateStr) => {
  if (!dateStr || dateStr === 'Ch∆∞a x√°c ƒë·ªãnh') return 'Ch∆∞a x√°c ƒë·ªãnh';
  try {
    return moment(dateStr).format('YYYY-MM-DD');
  } catch (e) {
    return dateStr;
  }
};

// H√†m parse v√† chu·∫©n h√≥a d·ªØ li·ªáu l·ªãch h·ªçc t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau
const parseSchedule = (scheduleData) => {
  if (!scheduleData) return [];
  
  let schedule = [];
  
  // N·∫øu schedule l√† chu·ªói JSON, th·ª≠ parse
  if (typeof scheduleData === 'string') {
    try {
      schedule = JSON.parse(scheduleData);
    } catch (e) {
      // N·∫øu kh√¥ng parse ƒë∆∞·ª£c, m·∫∑c ƒë·ªãnh l√† r·ªóng
      return [];
    }
  } else if (Array.isArray(scheduleData)) {
    schedule = scheduleData;
  }
  
  // S·∫Øp x·∫øp l·ªãch h·ªçc theo th·ª© t·ª± c√°c ng√†y trong tu·∫ßn
  const weekdayOrder = {
    'Th·ª© 2': 1,
    'Th·ª© 3': 2, 
    'Th·ª© 4': 3,
    'Th·ª© 5': 4,
    'Th·ª© 6': 5,
    'Th·ª© 7': 6,
    'Ch·ªß nh·∫≠t': 7,
    'CN': 7
  };
  
  return [...schedule].sort((a, b) => {
    const orderA = weekdayOrder[a.weekday] || 10;
    const orderB = weekdayOrder[b.weekday] || 10;
    return orderA - orderB;
  });
};

// Extract field mappings for easier access
const { STUDENT: STUDENT_FIELDS, RESERVATION: RESERVATION_FIELDS } = FIELD_MAPPINGS;

/**
 * Component to display reservation information and confirm
 * Used for Case 1 when student has a valid reservation
 * @param {Object} student - Student data from API
 * @param {Object} reservationData - Reservation data from API
 * @param {Function} onConfirm - Function to call when confirming reservation
 * @param {Function} onCancel - Function to call when navigating to class list
 * @param {Function} onCancelReservation - Function to call when canceling reservation
 * @param {boolean} loading - Loading state
 */
const ReservationConfirmation = ({ 
  student, 
  reservationData, 
  onConfirm, 
  onCancel,
  onCancelReservation,
  loading = false
}) => {
  // State ƒë·ªÉ qu·∫£n l√Ω modal x√°c nh·∫≠n h·ªßy
  const [cancelModalVisible, setCancelModalVisible] = useState(false);
  
  // Hi·ªÉn th·ªã modal x√°c nh·∫≠n h·ªßy
  const showCancelModal = () => {
    setCancelModalVisible(true);
  };
  
  // H·ªßy thao t√°c trong modal
  const handleCancelModal = () => {
    setCancelModalVisible(false);
  };
  
  // X√°c nh·∫≠n h·ªßy gi·ªØ ch·ªó
  const handleConfirmCancel = () => {
    setCancelModalVisible(false);
    onCancelReservation();
  };
  // Kh√¥ng c·∫ßn thao t√°c DOM tr·ª±c ti·∫øp n·ªØa v√¨ ƒë√£ s·ª≠ d·ª•ng ProgressStepContext

  // Truy c·∫≠p context ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh ti·∫øn tr√¨nh
  const { goToStep } = useProgressStep();
  
  // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh ti·∫øn tr√¨nh khi component mount
  useEffect(() => {
    // ƒê·∫∑t b∆∞·ªõc 1 (X√°c nh·∫≠n th√¥ng tin) l√† active, quay l·∫°i t·ª´ b∆∞·ªõc 2
    goToStep(1);
  }, []);
  
  // Th√™m log ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
  console.log('üîç DEBUG - ReservationConfirmation nh·∫≠n student:', student);
  console.log('üîç DEBUG - Student type:', typeof student);
  console.log('üîç DEBUG - Student fields:', student ? Object.keys(student) : 'null');
  console.log('üîç DEBUG - STUDENT_FIELDS:', STUDENT_FIELDS);
  console.log('üîç DEBUG - ReservationConfirmation nh·∫≠n reservationData:', reservationData);
  
  // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu student v√† x·ª≠ l√Ω ph√π h·ª£p
  // C√≥ th·ªÉ student l√† object tr·ª±c ti·∫øp ho·∫∑c student.data
  const studentData = student?.hasData ? student.data : student;
  console.log('üîç DEBUG - studentData ƒë√£ x·ª≠ l√Ω:', studentData);
  
  // If data is still loading or not available, show skeleton
  if (loading) {
    console.log('üîç DEBUG - ReservationConfirmation ƒëang loading...');
    return (
      <div className={styles.confirmationContainer}>
        <Card className={styles.card}>
          <Skeleton active paragraph={{ rows: 6 }} />
        </Card>
      </div>
    );
  }

  // Ki·ªÉm tra xem d·ªØ li·ªáu student c√≥ hay kh√¥ng, n·∫øu kh√¥ng c√≥ v√† c≈©ng kh√¥ng c√≥ d·ªØ li·ªáu reservation th√¨ m·ªõi hi·ªÉn th·ªã warning
  // N·∫øu c√≥ reservation data, v·∫´n c√≥ th·ªÉ hi·ªÉn th·ªã ƒë∆∞·ª£c kh√¥ng c·∫ßn student data
  // Th√™m ki·ªÉm tra null/undefined tr∆∞·ªõc khi g·ªçi Object.keys ƒë·ªÉ tr√°nh l·ªói
  const hasAnyData = (studentData && Object.keys(studentData).length > 0) || 
                    (reservationData && (reservationData.tenHocVien || reservationData.maLop || reservationData[RESERVATION_FIELDS.CLASS_CODE]));
                    
  if (!hasAnyData) {
    console.log('üîç DEBUG - ReservationConfirmation kh√¥ng c√≥ d·ªØ li·ªáu student hay reservation');
    return (
      <div className={styles.confirmationContainer}>
        <Card className={styles.card}>
          <Result
            status="warning"
            title="Kh√¥ng c√≥ d·ªØ li·ªáu h·ªçc vi√™n ho·∫∑c gi·ªØ ch·ªó"
            subTitle="Vui l√≤ng quay l·∫°i m√†n h√¨nh tr∆∞·ªõc"
          />
        </Card>
      </div>
    );
  }

  // Check if reservation has required data - check for both mapped and direct field names
  const hasReservationData = reservationData && (
    reservationData[RESERVATION_FIELDS.CLASS_CODE] || 
    reservationData.maLop ||
    reservationData.maGiuCho
  );
  
  console.log('üîç DEBUG - hasReservationData:', hasReservationData);
  
  return (
    <div className={styles.confirmationContainer}>
      <Card className={styles.card} bodyStyle={{ padding: '16px' }}>
        <Space direction="vertical" size={8} style={{ width: '100%' }}>
          <Title level={4} className={styles.cardTitle} style={{ margin: '0 0 8px', textAlign: 'left' }}>
            <CheckCircleOutlined style={{ color: 'var(--success-color)', marginRight: '8px' }} />
            Phi·∫øu x√°c nh·∫≠n gi·ªØ ch·ªó
          </Title>
          <Divider style={{ margin: '4px 0' }} />
          
          <div>
            <Paragraph className="fs-md" style={{ lineHeight: 1.4, margin: '4px 0' }}>
              B·∫°n ƒë√£ ƒë∆∞·ª£c gi·ªØ ch·ªó tr∆∞·ªõc ƒë√≥ cho l·ªãch h·ªçc d∆∞·ªõi ƒë√¢y. Vui l√≤ng x√°c nh·∫≠n ƒë·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω.
            </Paragraph>
          </div>
        
          {!hasReservationData && (
            <Alert
              message={<span className="fs-md fw-medium">Th√¥ng tin kh√¥ng ƒë·∫ßy ƒë·ªß</span>}
              description={<p className="fs-sm" style={{ lineHeight: 1.5, margin: '8px 0 0' }}>Th√¥ng tin gi·ªØ ch·ªó c·ªßa b·∫°n kh√¥ng ƒë·∫ßy ƒë·ªß. B·∫°n v·∫´n c√≥ th·ªÉ x√°c nh·∫≠n ho·∫∑c ch·ªçn l·ªõp h·ªçc kh√°c.</p>}
              type="warning"
              showIcon
              icon={<InfoCircleOutlined />}
              className={styles.warningAlert}
              style={{ marginBottom: 16 }}
            />
          )}
        
          <div className={styles.infoContainer}>
            <div className={styles.columnHeader}>
              <CalendarOutlined />
              <span className="fs-md">TH√îNG TIN L·ªäCH H·ªåC</span>
            </div>
            
            <Space direction="vertical" size={8} style={{ width: '100%' }}>
              {/* M√£ l·ªõp */}
              <div className={styles.infoItem}>
                <Row align="middle">
                  <Col span={8} xs={24} md={8}>
                    <div className={styles.infoLabel}>
                      <TeamOutlined style={{ marginRight: '8px', color: 'var(--primary-color)' }} /> 
                      <span className="fs-md">M√£ l·ªõp</span>
                    </div>
                  </Col>
                  <Col span={16} xs={24} md={16}>
                    <div className={styles.infoValue}>
                      <Tag color="purple" style={{ padding: '2px 8px', fontSize: 'var(--font-size-md)' }}>
                        {(reservationData && (reservationData[RESERVATION_FIELDS.CLASS_CODE] || reservationData.maLop))
                          ? (reservationData[RESERVATION_FIELDS.CLASS_CODE] || reservationData.maLop)
                          : 'Ch∆∞a c√≥ m√£'}
                      </Tag>
                    </div>
                  </Col>
                </Row>
              </div>
              
              {/* Ng√†y khai gi·∫£ng */}
              <div className={styles.infoItem}>
                <Row align="middle">
                  <Col span={8} xs={24} md={8}>
                    <div className={styles.infoLabel}>
                      <CalendarOutlined style={{ marginRight: '8px', color: 'var(--primary-color)' }} /> 
                      <span className="fs-md">Ng√†y khai gi·∫£ng</span>
                    </div>
                  </Col>
                  <Col span={16} xs={24} md={16}>
                    <div className={styles.infoValue}>
                      <Tag color="blue" style={{ padding: '2px 8px', fontSize: 'var(--font-size-md)' }}>
                        {formatDate((reservationData && (
                          reservationData[RESERVATION_FIELDS.START_DATE] || 
                          reservationData.ngayKhaiGiangDuKien
                        )) || 'Ch∆∞a c√≥ th√¥ng tin')}
                      </Tag>
                    </div>
                  </Col>
                </Row>
              </div>
              
              {/* L·ªãch h·ªçc */}
              <div className={styles.infoItem}>
                <Row align="middle">
                  <Col span={8} xs={24} md={8}>
                    <div className={styles.infoLabel}>
                      <ClockCircleOutlined style={{ marginRight: '8px', color: 'var(--primary-color)' }} /> 
                      <span className="fs-md">L·ªãch h·ªçc</span>
                    </div>
                  </Col>
                  <Col span={16} xs={24} md={16}>
                    <div className={styles.infoValue} style={{ margin: 0, padding: 0 }}>
                      <div className={styles.customScheduleDisplay}>
                        {/* D·ªØ li·ªáu m·∫´u - hi·ªÉn th·ªã c·ªë ƒë·ªãnh ƒë·ªÉ ƒë·∫£m b·∫£o giao di·ªán */}
                        <div className={styles.customScheduleList}>
                          <div className={styles.customScheduleItem}>
                            <div className={styles.weekdayWrapper}>
                              <Tag color="blue" className={styles.weekdayTag}>Th·ª© 3</Tag>
                            </div>
                            <div className={styles.timeWrapper}>
                              18:00 - 19:30
                            </div>
                          </div>
                          <div className={styles.customScheduleItem}>
                            <div className={styles.weekdayWrapper}>
                              <Tag color="blue" className={styles.weekdayTag}>Th·ª© 7</Tag>
                            </div>
                            <div className={styles.timeWrapper}>
                              18:00 - 19:30
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </Col>
                </Row>
              </div>
            </Space>
          </div>
          
          <div className={styles.confirmationActions} style={{ marginTop: 24, display: 'flex', flexDirection: 'column', gap: 16 }}>
            <Button 
              danger
              onClick={showCancelModal} 
              loading={loading}
              icon={<CloseCircleOutlined />}
              className="btn-cancel"
              size="large"
              block
              style={{ height: '40px', maxWidth: '100%', borderRadius: 4 }}
            >
              H·ªßy gi·ªØ ch·ªó
            </Button>

            <Button 
              type="primary" 
              onClick={onConfirm} 
              loading={loading}
              icon={<CheckCircleOutlined />}
              className="btn-primary"
              size="large"
              block
              style={{ height: '40px', maxWidth: '100%', borderRadius: 4 }}
            >
              X√°c nh·∫≠n gi·ªØ ch·ªó
            </Button>
          </div>
        </Space>
      </Card>
      
      {/* Modal x√°c nh·∫≠n h·ªßy gi·ªØ ch·ªó */}
      <Modal
        title={<div style={{ display: 'flex', alignItems: 'center' }}>
          <CloseCircleOutlined style={{ color: 'var(--error-color)', marginRight: '8px' }} />
          <span className="fs-lg fw-medium">X√°c nh·∫≠n h·ªßy gi·ªØ ch·ªó</span>
        </div>}
        open={cancelModalVisible}
        onCancel={handleCancelModal}
        maskClosable={false}
        centered
        width="auto"
        style={{ maxWidth: '450px' }}
        footer={[
          <Button key="back" onClick={handleCancelModal} size="large" className="btn-default">
            Quay l·∫°i
          </Button>,
          <Button key="submit" danger onClick={handleConfirmCancel} size="large" className="btn-danger">
            X√°c nh·∫≠n h·ªßy
          </Button>,
        ]}
      >
        <div style={{ padding: '16px 0' }}>
          <Alert
            message={<span className="fs-md fw-medium">L∆∞u √Ω quan tr·ªçng!</span>}
            description={
              <div className="fs-sm" style={{ lineHeight: 1.5 }}>
                <p>Thao t√°c n√†y s·∫Ω <strong>kh√¥ng th·ªÉ ho√†n t√°c</strong> sau khi x√°c nh·∫≠n.</p>
                <p style={{ marginBottom: 0 }}>B·∫°n s·∫Ω c·∫ßn ch·ªçn l·ªãch h·ªçc kh√°c trong danh s√°ch l·ªõp n·∫øu v·∫´n mu·ªën ƒëƒÉng k√Ω h·ªçc.</p>
              </div>
            }
            type="warning"
            showIcon
            style={{ border: '1px solid var(--warning-border-color)', borderRadius: 'var(--border-radius-md)' }}
          />
        </div>
      </Modal>
    </div>
  );
};

export default ReservationConfirmation;