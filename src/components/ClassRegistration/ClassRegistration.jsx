import React, { useState, useEffect } from 'react';
import { Spin, Result, Button, message, Modal } from 'antd';
import { fetchStudentData, checkReservation, fetchAvailableClasses, updateStudentClass, updateClassRegistration } from './api';
import { formatSchedule, validateScheduleSelection, validateClassSelection } from './utils';
import ReservationConfirmation from './ReservationConfirmation';
import ClassSelection from './ClassSelection';
import CustomSchedule from './CustomSchedule/index';
import SuccessScreen from './SuccessScreen';
import { MESSAGES, FIELD_MAPPINGS } from '../../config';

// Extract field mappings for easier access
const { STUDENT: STUDENT_FIELDS } = FIELD_MAPPINGS;

/**
 * Main component for class registration process
 * Handles different cases and screens based on student data
 */
const ClassRegistration = () => {
  // States
  const [loading, setLoading] = useState(true);
  const [studentData, setStudentData] = useState({});
  const [reservationData, setReservationData] = useState(null);
  const [classList, setClassList] = useState([]);
  const [currentCase, setCurrentCase] = useState(null); // Case 1, 2, or 3
  const [currentScreen, setCurrentScreen] = useState('loading'); // loading, error, reservation, classList, customSchedule, success
  const [errorMessage, setErrorMessage] = useState('');
  const [processingAction, setProcessingAction] = useState(false);

  useEffect(() => {
    // Get ID and direct_success from URL
    const queryParams = new URLSearchParams(window.location.search);
    const id = queryParams.get('id');
    const directSuccess = queryParams.get('direct_success');
    
    console.log('URL params:', {id, directSuccess});
    
    if (id) {
      // N·∫øu c√≥ tham s·ªë direct_success=true, chuy·ªÉn th·∫≥ng ƒë·∫øn Success Screen
      if (directSuccess === 'true') {
        console.log('direct_success=true, chuy·ªÉn th·∫≥ng ƒë·∫øn Success Screen');
        loadStudentDataForSuccess(id);
      } else {
        // Flow b√¨nh th∆∞·ªùng
        console.log('Kh√¥ng c√≥ direct_success ho·∫∑c kh√¥ng b·∫±ng true, th·ª±c hi·ªán flow b√¨nh th∆∞·ªùng');
        loadStudentData(id);
      }
    } else {
      setLoading(false);
      setErrorMessage(MESSAGES.NO_ID_IN_URL);
      setCurrentScreen('error');
    }
  }, []);

  /**
   * Load student data and go directly to success screen
   * @param {string} id - Bill Item ID from URL
   */
  const loadStudentDataForSuccess = async (id) => {
    try {
      setLoading(true);
      
      console.log('üîç loadStudentDataForSuccess - Loading data for direct success screen:', id);
      
      // Fetch student data with billItemId
      const data = await fetchStudentData(id);
      setStudentData(data);
      
      console.log('üìã Student data loaded, proceeding directly to success screen');
      
      // Go directly to success screen
      setCurrentScreen('success');
      
    } catch (error) {
      console.error('‚ùå Error loading student data for success screen:', error);
      setLoading(false);
      setErrorMessage(error.message || MESSAGES.STUDENT_DATA_LOAD_ERROR);
      setCurrentScreen('error');
    } finally {
      setLoading(false);
    }
  };

  /**
   * Main function to load student data and determine the case
   * @param {string} id - Bill Item ID from URL
   */
  const loadStudentData = async (id) => {
    try {
      setLoading(true);
      
      console.log('üîç loadStudentData - Start with ID:', id);
      
      // Fetch student data with billItemId
      const data = await fetchStudentData(id);
      setStudentData(data);
      
      console.log('üìã loadStudentData - Student data received:', data);
      console.log('üîë loadStudentData - Checking for class code (maLop):', data[STUDENT_FIELDS.CLASS_CODE]);
      
      // Check if student has class code (maLop)
      if (data[STUDENT_FIELDS.CLASS_CODE]) {
        // Look for reservation in form_giu_cho where ma_order matches maLop
        console.log('üîé loadStudentData - Searching for reservation with ma_order:', data[STUDENT_FIELDS.CLASS_CODE]);
        const reservation = await checkReservation(data[STUDENT_FIELDS.CLASS_CODE]);
        
        console.log('üé´ loadStudentData - Reservation check result:', reservation);
        
        if (reservation) {
          console.log('‚úÖ loadStudentData - Reservation found, checking if valid. IS_VALID field:', reservation[FIELD_MAPPINGS.RESERVATION.IS_VALID]);
          
          if (reservation[FIELD_MAPPINGS.RESERVATION.IS_VALID] === "H·ª£p l·ªá") {
            // Case 1: Valid reservation
            console.log('üü¢ loadStudentData - CASE 1: Valid reservation detected, will show ReservationConfirmation screen');
            setReservationData(reservation);
            setCurrentCase(1);
            setCurrentScreen('reservation');
          } else {
            // Case 2: Invalid reservation
            console.log('üü† loadStudentData - CASE 2: Invalid reservation detected (IS_VALID is false)');
            setReservationData(reservation);
            setCurrentCase(2);
            // Proceed to Case 3 with warning
            handleCase3(data, true);
          }
        } else {
          // Case 2: Reservation not found
          console.log('üî¥ loadStudentData - CASE 2: Reservation not found despite having a class code');
          setCurrentCase(2);
          // Proceed to Case 3 with warning
          handleCase3(data, true);
        }
      } else {
        // Case 3: No reservation
        console.log('‚ÑπÔ∏è loadStudentData - CASE 3: No class code found, proceeding to normal class selection');
        handleCase3(data);
      }
    } catch (error) {
      console.error('‚ùå loadStudentData - Error:', error);
      setLoading(false);
      setErrorMessage(error.message || MESSAGES.STUDENT_DATA_LOAD_ERROR);
      setCurrentScreen('error');
    }
  };

  /**
   * Handle Case 3: No reservation or invalid reservation
   * @param {Object} data - Student data
   * @param {boolean} showWarning - Whether to show warning about invalid reservation
   */
  const handleCase3 = async (data, showWarning = false) => {
    setCurrentCase(3);
    
    if (data[STUDENT_FIELDS.CLASS_SIZE] === '1:1') {
      // Case 3b: 1:1 class - show custom schedule screen
      setCurrentScreen('customSchedule');
      setLoading(false);
    } else {
      // Case 3a: Non 1:1 class - fetch available classes
      try {
        // Log what we're using for debugging
        console.log('Student data for class search:', {
          sanPham: data[STUDENT_FIELDS.PRODUCT],
          sizeLop: data[STUDENT_FIELDS.CLASS_SIZE], 
          loaiGv: data[STUDENT_FIELDS.TEACHER_TYPE],
          goiMua: data[STUDENT_FIELDS.PACKAGE],
        });
        
        // Check if we have minimal data to search
        if (!data[STUDENT_FIELDS.PRODUCT] && !data[STUDENT_FIELDS.PACKAGE]) {
          throw new Error(MESSAGES.MISSING_COURSE_INFO);
        }
        
        const classesData = await fetchAvailableClasses({
          sanPham: data[STUDENT_FIELDS.PRODUCT],
          sizeLop: data[STUDENT_FIELDS.CLASS_SIZE],
          loaiGv: data[STUDENT_FIELDS.TEACHER_TYPE],
          goiMua: data[STUDENT_FIELDS.PACKAGE]
        });
        
        // Set classes list directly without grouping
        setClassList(classesData);
        setCurrentScreen('classList');
        
        // Show message if no classes found
        if (classesData.length === 0) {
          message.info(MESSAGES.NO_CLASSES_FOUND);
        } else {
          message.success(MESSAGES.CLASSES_FOUND.replace('{count}', classesData.length));
        }
      } catch (error) {
        console.error('Error fetching available classes:', error);
        message.error(error.message || MESSAGES.CLASS_FETCH_ERROR);
        // Still show the class list screen, but it will display empty state
        setCurrentScreen('classList');
      } finally {
        setLoading(false);
      }
    }
    
    if (showWarning) {
      message.warning(MESSAGES.RESERVATION_NOT_FOUND.replace(
        '{code}', 
        data[STUDENT_FIELDS.CLASS_CODE] || MESSAGES.CLASS_CODE
      ));
    }
  };

  /**
   * Handle class selection
   * @param {Object} selectedClass - Selected class object
   */
  const handleClassSelection = async (selectedClass) => {
    console.log("ƒê√£ nh·∫≠n n√∫t ch·ªçn");
    
    if (!selectedClass) {
      message.error(MESSAGES.SELECT_CLASS);
      return;
    }
    
    // Validate class selection
    const validationResult = validateClassSelection(studentData, selectedClass);
    if (!validationResult.valid) {
      message.error(validationResult.message);
      return;
    }
    
    setProcessingAction(true);
    
    try {
      // 1. X·ª≠ l√Ω th√¥ng tin l·ªãch h·ªçc t·ª´ l·ªõp ƒë∆∞·ª£c ch·ªçn
      let scheduleString = "";
      
      // Ki·ªÉm tra n·∫øu selectedClass c√≥ th√¥ng tin v·ªÅ t·∫•t c·∫£ l·ªãch h·ªçc
      if (selectedClass.allSchedules && selectedClass.allSchedules.length > 0) {
        // Format l·ªãch h·ªçc: "ngayHoc1 - gioBatDau1 : gioKetThuc1 / ngayHoc2 - gioBatDau2 : gioKetThuc2 /..."
        scheduleString = selectedClass.allSchedules.map(schedule => {
          // T·ª´ chu·ªói th·ªùi gian "08:00 - 10:00", t√°ch th√†nh gi·ªù b·∫Øt ƒë·∫ßu v√† gi·ªù k·∫øt th√∫c
          const timeParts = schedule.time.split(' - ');
          return `${schedule.weekday} - ${timeParts[0]} : ${timeParts[1]}`;
        }).join(' / ');
      } else if (selectedClass.schedules && selectedClass.schedules.length > 0) {
        // Tr∆∞·ªùng h·ª£p d·ª± ph√≤ng, n·∫øu c√≥ schedules nh∆∞ng kh√¥ng c√≥ allSchedules
        scheduleString = selectedClass.schedules.map(schedule => {
          const timeParts = schedule.time.split(' - ');
          return `${schedule.weekday} - ${timeParts[0]} : ${timeParts[1]}`;
        }).join(' / ');
      } else {
        // Tr∆∞·ªùng h·ª£p d·ª± ph√≤ng, n·∫øu kh√¥ng c√≥ schedules
        scheduleString = `${selectedClass[FIELD_MAPPINGS.CLASS.WEEKDAY]} - ${selectedClass[FIELD_MAPPINGS.CLASS.START_TIME]} : ${selectedClass[FIELD_MAPPINGS.CLASS.END_TIME]}`;
      }
      
      console.log("L·ªãch h·ªçc ƒë√£ format:", scheduleString);
      
      // 2. C·∫≠p nh·∫≠t th√¥ng tin h·ªçc vi√™n
      await updateStudentClass(studentData.Id, {
        [STUDENT_FIELDS.CLASS_CODE]: selectedClass[FIELD_MAPPINGS.CLASS.CODE],
        [STUDENT_FIELDS.SCHEDULE]: scheduleString,
        [STUDENT_FIELDS.START_DATE]: selectedClass[FIELD_MAPPINGS.CLASS.START_DATE],
        [STUDENT_FIELDS.STATUS]: "HV Ch·ªçn l·ªãch h·ªá th·ªëng"
      });
      
      // 3. C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ƒëƒÉng k√Ω trong b·∫£ng Class
      try {
        // L·∫•y m√£ l·ªõp h·ªçc t·ª´ selectedClass
        const classCode = selectedClass[FIELD_MAPPINGS.CLASS.CODE];
        
        if (classCode) {
          // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ƒëƒÉng k√Ω cho t·∫•t c·∫£ b·∫£n ghi c·ªßa l·ªõp
          await updateClassRegistration(classCode);
          console.log("ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ƒëƒÉng k√Ω cho l·ªõp:", classCode);
        } else {
          console.warn("Kh√¥ng t√¨m th·∫•y m√£ l·ªõp, kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ƒëƒÉng k√Ω");
        }
      } catch (classUpdateError) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ƒëƒÉng k√Ω:", classUpdateError);
        // V·∫´n ti·∫øp t·ª•c x·ª≠ l√Ω v√¨ ƒë√£ c·∫≠p nh·∫≠t th√†nh c√¥ng th√¥ng tin h·ªçc vi√™n
      }
      
      // 4. C·∫≠p nh·∫≠t state trong component
      setStudentData(prev => ({
        ...prev,
        [STUDENT_FIELDS.CLASS_CODE]: selectedClass[FIELD_MAPPINGS.CLASS.CODE],
        [STUDENT_FIELDS.SCHEDULE]: scheduleString,
        [STUDENT_FIELDS.START_DATE]: selectedClass[FIELD_MAPPINGS.CLASS.START_DATE],
        [STUDENT_FIELDS.STATUS]: "HV Ch·ªçn l·ªãch h·ªá th·ªëng"
      }));
      
      // 5. Chuy·ªÉn ƒë·∫øn m√†n h√¨nh th√†nh c√¥ng
      setCurrentScreen('success');
      message.success(MESSAGES.CLASS_REGISTRATION_SUCCESS);
    } catch (error) {
      console.error('Error updating class selection:', error);
      message.error(error.message || MESSAGES.CLASS_REGISTRATION_FAILED.replace('{error}', ''));
    } finally {
      setProcessingAction(false);
    }
  };

  /**
   * Confirm reservation
   */
  // C·∫≠p nh·∫≠t h√†m handleConfirmReservation trong ClassRegistration.jsx v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
  const handleConfirmReservation = async () => {
    if (!studentData || !studentData.Id || !reservationData) {
      message.error(MESSAGES.MISSING_RESERVATION_INFO);
      return;
    }
    
    setProcessingAction(true);
    
    try {
      // L·∫•y c√°c th√¥ng tin quan tr·ªçng t·ª´ reservationData
      const classCode = reservationData[FIELD_MAPPINGS.RESERVATION.CLASS_CODE];
      const schedule = reservationData.lichHoc;
      const startDate = reservationData.ngayKhaiGiangDuKien;
      
      // Update student data with complete information
      await updateStudentClass(studentData.Id, {
        [STUDENT_FIELDS.CLASS_CODE]: classCode,
        [STUDENT_FIELDS.SCHEDULE]: schedule,
        [STUDENT_FIELDS.START_DATE]: startDate,
        [STUDENT_FIELDS.STATUS]: "HV X√°c nh·∫≠n l·ªãch ƒë∆∞·ª£c gi·ªØ"
      });
      
      // Update local state
      setStudentData(prev => ({
        ...prev,
        [STUDENT_FIELDS.CLASS_CODE]: classCode,
        [STUDENT_FIELDS.SCHEDULE]: schedule,
        [STUDENT_FIELDS.START_DATE]: startDate,
        [STUDENT_FIELDS.STATUS]: "HV X√°c nh·∫≠n l·ªãch ƒë∆∞·ª£c gi·ªØ"
      }));
      
      // Show success screen
      setCurrentScreen('success');
      message.success(MESSAGES.RESERVATION_CONFIRMATION_SUCCESS);
    } catch (error) {
      console.error('Error confirming reservation:', error);
      message.error(error.message || MESSAGES.RESERVATION_CONFIRMATION_FAILED.replace('{error}', ''));
    } finally {
      setProcessingAction(false);
    }
  };

  /**
 * Handle custom schedule submission
 * @param {Array} selectedSchedules - Array of selected schedule objects
 */
  const handleCustomScheduleSubmit = async (selectedSchedules) => {
    if (!studentData || !studentData.Id) {
      message.error(MESSAGES.MISSING_STUDENT_INFO);
      return;
    }
    
    // Validate schedule selection
    const validationResult = validateScheduleSelection(selectedSchedules);
    if (!validationResult.valid) {
      message.error(validationResult.message);
      return;
    }
    
    setProcessingAction(true);
    
    // Format the schedule string
    const formattedSchedule = formatSchedule(selectedSchedules);
    
    if (!formattedSchedule) {
      setProcessingAction(false);
      message.error(MESSAGES.INVALID_SCHEDULE);
      return;
    }
    
    try {
      // IMPORTANT: C·∫≠p nh·∫≠t state local tr∆∞·ªõc
      // ƒêi·ªÅu n√†y gi√∫p ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c hi·ªÉn th·ªã ƒë√∫ng trong Success Screen
      setStudentData(prev => ({
        ...prev,
        [STUDENT_FIELDS.SCHEDULE]: formattedSchedule,
        [STUDENT_FIELDS.STATUS]: "HV Ch·ªçn l·ªãch ngo√†i"
      }));
      
      // CRITICAL: Chuy·ªÉn ƒë·∫øn m√†n h√¨nh th√†nh c√¥ng
      // Ngay c·∫£ khi API c√≥ th·ªÉ th·∫•t b·∫°i, ng∆∞·ªùi d√πng v·∫´n ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn m√†n h√¨nh th√†nh c√¥ng
      setCurrentScreen('success');
      
      // Sau ƒë√≥, c·ªë g·∫Øng l∆∞u d·ªØ li·ªáu v√†o database
      try {
        await updateStudentClass(studentData.Id, {
          [STUDENT_FIELDS.SCHEDULE]: formattedSchedule,
          [STUDENT_FIELDS.STATUS]: "HV Ch·ªçn l·ªãch ngo√†i"
        });
        
        console.log('Database updated successfully');
        message.success(MESSAGES.CUSTOM_SCHEDULE_SUCCESS);
      } catch (apiError) {
        // Ghi log l·ªói nh∆∞ng kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn UI
        console.error('Error updating database, but flow continues:', apiError);
        // Hi·ªÉn th·ªã th√¥ng b√°o nh·∫π nh√†ng
        message.warning('D·ªØ li·ªáu hi·ªÉn th·ªã c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c l∆∞u tr·ªØ ƒë·∫ßy ƒë·ªß');
      }
    } catch (error) {
      // Hi·∫øm khi x·∫£y ra l·ªói ·ªü ƒë√¢y v√¨ ch√∫ng ta ƒë√£ x·ª≠ l√Ω l·ªói API b√™n trong
      console.error('Unexpected error:', error);
      message.error(MESSAGES.CUSTOM_SCHEDULE_FAILED.replace('{error}', error.message));
      setProcessingAction(false);
    } finally {
      // ƒê·∫£m b·∫£o reset tr·∫°ng th√°i x·ª≠ l√Ω
      setProcessingAction(false);
    }
  };
  /**
   * Refresh class list data from API
   */
  const refreshClassList = async () => {
    try {
      const classesData = await fetchAvailableClasses({
        sanPham: studentData[STUDENT_FIELDS.PRODUCT],
        sizeLop: studentData[STUDENT_FIELDS.CLASS_SIZE],
        loaiGv: studentData[STUDENT_FIELDS.TEACHER_TYPE],
        goiMua: studentData[STUDENT_FIELDS.PACKAGE]
      });
      
      setClassList(classesData);
      message.success('ƒê√£ t·∫£i l·∫°i danh s√°ch l·ªõp h·ªçc');
      return Promise.resolve();
    } catch (error) {
      console.error('Error refreshing class list:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i l·∫°i danh s√°ch l·ªõp h·ªçc');
      return Promise.reject(error);
    }
  };

  /**
   * Navigate between screens
   */
  const handleSwitchToCustomSchedule = () => {
    setCurrentScreen('customSchedule');
  };

  const handleChooseAgain = () => {
    if (studentData[STUDENT_FIELDS.CLASS_SIZE] === '1:1') {
      setCurrentScreen('customSchedule');
    } else {
      setCurrentScreen('classList');
    }
  };

  const handleCancelReservation = () => {
    handleCase3(studentData);
  };

  const handleCompleteRegistration = () => {
    window.location.href = '/';
  };

  const handleRetry = () => {
    const queryParams = new URLSearchParams(window.location.search);
    const id = queryParams.get('id');
    
    if (id) {
      loadStudentData(id);
    } else {
      window.location.href = '/step-one';
    }
  };

  /**
   * Render different screens based on current state
   */
  const renderContent = () => {
    console.log('üñ•Ô∏è renderContent - Current screen:', currentScreen);
    console.log('üî¢ renderContent - Current case:', currentCase);

    switch (currentScreen) {
      case 'loading':
        console.log('‚è≥ renderContent - Showing loading screen');
        return (
          <div style={{ display: 'flex', justifyContent: 'center', padding: '50px' }}>
            <Spin size="large" tip="ƒêang t·∫£i th√¥ng tin..." />
          </div>
        );
      
      case 'error':
        return (
          <Result
            status="error"
            title="C√≥ l·ªói x·∫£y ra"
            subTitle={errorMessage}
            extra={[
              <Button key="retry" onClick={handleRetry}>
                Th·ª≠ l·∫°i
              </Button>,
              <Button key="back" type="primary" onClick={() => window.history.back()}>
                Quay l·∫°i
              </Button>
            ]}
          />
        );
      
      case 'reservation':
        console.log('üé´ renderContent - Showing ReservationConfirmation screen');
        console.log('üë§ Student Data:', studentData);
        console.log('üéüÔ∏è Reservation Data:', reservationData);
        console.log('üîë Class Code (maLop):', studentData[STUDENT_FIELDS.CLASS_CODE]);
        console.log('üîë Reservation ma_order:', reservationData ? reservationData[FIELD_MAPPINGS.RESERVATION.ORDER_CODE] : 'N/A');
        return (
          <ReservationConfirmation
            studentData={studentData}
            reservationData={reservationData}
            onConfirm={handleConfirmReservation}
            onCancel={handleCancelReservation}
            loading={processingAction}
          />
        );
      case 'classList':
        return (
          <ClassSelection
            studentData={studentData}
            classList={classList}
            showWarning={currentCase === 2}
            onClassSelect={handleClassSelection}
            onSwitchToCustomSchedule={handleSwitchToCustomSchedule}
            loading={processingAction}
            onRefresh={refreshClassList}
          />
        );
      
      case 'customSchedule':
        return (
          <CustomSchedule
            studentData={studentData}
            onSubmit={handleCustomScheduleSubmit}
            onCancel={() => studentData[STUDENT_FIELDS.CLASS_SIZE] === '1:1' ? window.history.back() : setCurrentScreen('classList')}
            loading={processingAction}
            fromCase2={currentCase === 2}
          />
        );
      
      case 'success':
        return (
          <SuccessScreen
            studentData={studentData}
            onChooseAgain={handleChooseAgain}
            onComplete={handleCompleteRegistration}
            loading={processingAction}
          />
        );
      
      default:
        return (
          <Result
            status="info"
            title="ƒêang ph√°t tri·ªÉn"
            subTitle="T√≠nh nƒÉng ƒë·∫∑t l·ªãch h·ªçc ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn"
            extra={
              <Button type="primary" onClick={() => window.history.back()}>
                Quay l·∫°i
              </Button>
            }
          />
        );
    }
  };

  return (
    <div className="form-container" style={{ maxWidth: '800px', margin: '0 auto' }}>
      {renderContent()}
    </div>
  );
};

export default ClassRegistration;